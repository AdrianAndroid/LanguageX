plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.languagex'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def dirPath(String path) {
    return projectDir.absolutePath + path
}

// https://blog.csdn.net/Al_assad/article/details/78044539
task helloworld() {
    def basicPath = "/src/main/res/values/values.xml" // 以这个为基准
    // 需要对其的路径
    def res = [
            "/src/main/res/values-es/values.xml",
            "/src/main/res/values-ja/values.xml",
            "/src/main/res/values-ko/values.xml"
    ]

    Node basicNode = new XmlParser().parse(file(dirPath(basicPath)))
    // 找到所有的String node
    NodeList nodeList = (NodeList) basicNode.value()
    ArrayList stringArr = []
    ArrayList arrayArr = []
    // array string
    for (i in 0..<nodeList.size()) {
        Node node = (Node) nodeList.get(i)
//        println(node) println(node.attributes()) println(node.attributes().get("name")) println(node.value())
//        println("node.name=${node.name()} , node.attributes.get("name"")
        println(node.name())
        println(node.value())
        if ("string" == node.name()) {
            stringArr.add(node)
        } else if ("array" == node.name()) {
            //arrayArr.add(node.name())
        }
    }
    Comparator comparator = new Comparator() {
        @Override
        int compare(Object o1, Object o2) {
            String n1 = ((Node) o1).attributes().get("name")
            String n2 = ((Node) o2).attributes().get("name")
            return n1.compareToIgnoreCase(n2)
        }
    }
    stringArr.sort(comparator)
    arrayArr.sort(comparator)
    println(stringArr)
    println(arrayArr)

//    // 收集所有需要对齐的node
//    HashMap<String, Node> map = new HashMap<>()
//    for (i in 0..<res.size()) {
//        def path = res[i]
//        println(path)
//        Node xml = new XmlParser().parse(file(dirPath(path)))
//        println(xml)
//        map.put(path, xml)
//    }
//
//    // 读取所有的string
//    map.each { element ->
//        String path = element.key
//        NodeList nodeList = (NodeList) element.value.value()
//        for (i in 0..<nodeList.size()) {
//            Node node = (Node) nodeList.get(i)
//            println(node)
//        }
//    }
//
//    // 对齐所有的array
}

dependencies {
}